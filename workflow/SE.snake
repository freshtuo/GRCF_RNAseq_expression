configfile: "config/config.yaml"

def get_read1_file(wildcards):
    return config["read1"][wildcards.sample]

project=config["project"]

rule all:
    input:
        rawqc=expand("results/{project}/raw_fastq_qc/{sample}_R1_fastqc.html", project=config["project"], sample=config["read1"]),
        trimqc=expand("results/{project}/trim_fastq_qc/{sample}_R1.trimmed_fastqc.html", project=config["project"], sample=config["read1"]),
        bam=expand("results/{project}/star_align/{sample}/{sample}.Aligned.sortedByCoord.out.bam", project=config["project"], sample=config["read1"]),
        bamqc=expand("results/{project}/bam_qc/{sample}.rRNA_stat.txt", project=config["project"], sample=config["read1"]),
        fpkm=expand("results/{project}/cufflinks_fpkm/{sample}/genes.fpkm_tracking", project=config["project"], sample=config["read1"]),
        counts=expand("results/{project}/htseq_count_reads/{sample}.genes.HTSeq.count", project=config["project"], sample=config["read1"]),
        mutiqc=expand("results/{project}/multiqc/multiqc_report.html", project=config["project"]),
        fpkmsum=expand("results/{project}/summarize_fpkm/expression.genes.xlsx", project=config["project"]),
        countssum=expand("results/{project}/summarize_counts/raw_counts_genes.txt.gz", project=config["project"])

rule rename_fastq:
    input:
        read1=get_read1_file
    output:
        read1=temp("results/{project}/rename_fastq/{sample}_R1.fastq.gz")
    shell:
        "cp {input.read1} {output.read1}"

rule raw_fastq_qc:
    input:
        read1="results/{project}/rename_fastq/{sample}_R1.fastq.gz"
    output:
        out1="results/{project}/raw_fastq_qc/{sample}_R1_fastqc.html"
    log:
        "results/{project}/logs/raw_fastq_qc/{sample}.log"
    conda:
        "../envs/fastqc.yaml"
    threads: 4
    shell:
        "fastqc --outdir results/{project}/raw_fastq_qc --threads {threads} --quiet {input.read1} >{log} 2>&1"

rule trim_adapter:
    input:
        read1="results/{project}/rename_fastq/{sample}_R1.fastq.gz"
    output:
        read1=temp("results/{project}/trim_fastq/{sample}_R1.trimmed.fastq.gz")
    params:
        overlap=config["overlap"],
        adapter3=config["adapter3"],
        adapter5=config["adapter5"],
        minlen=config["minlen"],
        qscore=config["qscore"]
    log:
        "results/{project}/logs/trim_fastq/{sample}.log",
    threads: 4
    conda:
        "../envs/cutadapt.yaml"
    shell:
        "cutadapt -j {threads} -O {params.overlap} -m {params.minlen} -q {params.qscore} -a {params.adapter3} -o {output.read1} {input.read1} >{log} 2>&1; "

rule trim_fastq_qc:
    input:
        read1="results/{project}/trim_fastq/{sample}_R1.trimmed.fastq.gz"
    output:
        out1="results/{project}/trim_fastq_qc/{sample}_R1.trimmed_fastqc.html"
    log:
        "results/{project}/logs/trim_fastq_qc/{sample}.log"
    conda:
        "../envs/fastqc.yaml"
    threads: 4
    shell:
        "fastqc --outdir results/{project}/trim_fastq_qc --threads {threads} --quiet {input.read1} >{log} 2>&1"

rule star_align:
    input:
        read1="results/{project}/trim_fastq/{sample}_R1.trimmed.fastq.gz"
    output:
        bam="results/{project}/star_align/{sample}/{sample}.Aligned.sortedByCoord.out.bam",
        bai="results/{project}/star_align/{sample}/{sample}.Aligned.sortedByCoord.out.bam.bai"
    log:
        bam="results/{project}/logs/star_align/{sample}.star.log",
        bai="results/{project}/logs/star_align/{sample}.samtools.log",
        err="results/{project}/logs/star_align/{sample}.err.log"
    conda:
        "../envs/star.yaml"
    threads: 8
    script:
        "../scripts/star_align.py"

rule bam_qc:
    input:
        bam="results/{project}/star_align/{sample}/{sample}.Aligned.sortedByCoord.out.bam"
    output:
        stat="results/{project}/bam_qc/{sample}.bam_stats.txt",
        gcov="results/{project}/bam_qc/{sample}.geneBodyCoverage.curves.png",
        rdis="results/{project}/bam_qc/{sample}.read_distribution.txt",
        rrna="results/{project}/bam_qc/{sample}.rRNA_stat.txt",
        strand="results/{project}/bam_qc/{sample}.strandness.txt"
    params:
        hkgs=config["hkgs"],
        rsgs=config["rsgs"],
        rrnas=config["rrnas"]
    log:
        stat="results/{project}/logs/bam_qc/{sample}.bam_stat.log",
        gcov="results/{project}/logs/bam_qc/{sample}.geneBody_coverage.log",
        rdis="results/{project}/logs/bam_qc/{sample}.read_distribution.log",
        rrna="results/{project}/logs/bam_qc/{sample}.rRNA_stat.log",
        strand="results/{project}/logs/bam_qc/{sample}.infer_experiment.log"
    conda:
        "../envs/rseqc.yaml"
    shell:
        "bam_stat.py -i {input.bam} >{output.stat} 2>{log.stat}; "
        "geneBody_coverage.py -r {params.hkgs} -i {input.bam} -o results/{project}/bam_qc/{wildcards.sample} -f png >{log.gcov} 2>&1; "
        "read_distribution.py -i {input.bam} -r {params.rsgs} >{output.rdis} 2>{log.rdis}; "
        "split_bam.py -i {input.bam} -r {params.rrnas} -o results/{project}/bam_qc/{wildcards.sample}.rRNA >{output.rrna} 2>{log.rrna}; "
        "rm results/{project}/bam_qc/{wildcards.sample}.rRNA*.bam; "
        "infer_experiment.py -i {input.bam} -r {params.rsgs} >{output.strand} 2>{log.strand}; "

rule cufflinks_fpkm:
    input:
        bam="results/{project}/star_align/{sample}/{sample}.Aligned.sortedByCoord.out.bam"
    output:
        genes="results/{project}/cufflinks_fpkm/{sample}/genes.fpkm_tracking",
        isoforms="results/{project}/cufflinks_fpkm/{sample}/isoforms.fpkm_tracking"
    params:
        refgtf=config["refgtf"],
        refseq=config["refseq"],
        maskgtf=config["maskgtf"],
        maxBFrag=config["maxBFrag"],
        libtype=config["libtype"]
    log:
        "results/{project}/logs/cufflinks_fpkm/{sample}.cufflinks.log"
    conda:
        "../envs/cufflinks.yaml"
    threads: 8
    shell:
        "rm -f {log}*; "
        "cufflinks --output-dir results/{project}/cufflinks_fpkm/{wildcards.sample} --num-threads {threads} "
        "--GTF {params.refgtf} --compatible-hits-norm  --max-bundle-frags {params.maxBFrag} --upper-quartile-norm "
        "--frag-bias-correct {params.refseq} --multi-read-correct --library-type {params.libtype} --mask-file {params.maskgtf} "
        "{input.bam} >{log} 2>&1; "
        "gzip {log}"

rule htseq_count_reads:
    input:
        bam="results/{project}/star_align/{sample}/{sample}.Aligned.sortedByCoord.out.bam"
    output:
        counts="results/{project}/htseq_count_reads/{sample}.genes.HTSeq.count"
    params:
        libtype=config["libtype"],
        minaqual=config["minaqual"],
        refgtf=config["refgtf"],
        mem=config["mem"]
    log:
        htseq="results/{project}/logs/htseq_count_reads/{sample}.HTSeq.log.gz"
    conda:
        "../envs/htseq.yaml"
    threads: 8
    script:
        "../scripts/htseq_count_reads.py"

rule multiqc:
    input:
        rawfqqc=expand("results/{project}/raw_fastq_qc/{sample}_R1_fastqc.html", project=config["project"], sample=config["read1"]),
        staralign=expand("results/{project}/star_align/{sample}/{sample}.Aligned.sortedByCoord.out.bam", project=config["project"], sample=config["read1"]),
        bamqc=expand("results/{project}/bam_qc/{sample}.read_distribution.txt", project=config["project"], sample=config["read1"]),
        htcount=expand("results/{project}/htseq_count_reads/{sample}.genes.HTSeq.count", project=config["project"], sample=config["read1"])
    output:
        html=expand("results/{project}/multiqc/multiqc_report.html", project=config["project"])
    log:
        expand("results/{project}/logs/multiqc/multiqc.log", project=config["project"])
    conda:
        "../envs/multiqc.yaml"
    shell:
        """multiqc results/{project}/raw_fastq_qc/ results/{project}/star_align/ results/{project}/bam_qc/ results/{project}/htseq_count_reads/ """
        """--ignore "*_STARpass1" """
        """-o results/{project}/multiqc >{log} 2>&1"""

rule summarize_fpkm:
    input:
        gene=expand("results/{project}/cufflinks_fpkm/{sample}/genes.fpkm_tracking", project=config["project"], sample=config["read1"]),
        isoform=expand("results/{project}/cufflinks_fpkm/{sample}/isoforms.fpkm_tracking", project=config["project"], sample=config["read1"])
    output:
        gene=expand("results/{project}/summarize_fpkm/expression.genes.xlsx", project=config["project"]),
        isoform=expand("results/{project}/summarize_fpkm/expression.isoforms.xlsx", project=config["project"]),
        box=expand("results/{project}/summarize_fpkm/fpkm.genes.boxplot.png", project=config["project"])
    log:
        expand("results/{project}/logs/summarize_fpkm/summarize_fpkm.log", project=config["project"])
    conda:
        "../envs/python.yaml"
    script:
        "../scripts/summarize_fpkm.py"

rule summarize_counts:
    input:
        counts=expand("results/{project}/htseq_count_reads/{sample}.genes.HTSeq.count", project=config["project"], sample=config["read1"])
    output:
        counts=expand("results/{project}/summarize_counts/raw_counts_genes.txt.gz", project=config["project"]),
        other=expand("results/{project}/summarize_counts/raw_counts_other.txt.gz", project=config["project"])
    log:
        expand("results/{project}/logs/summarize_counts/summarize_counts.log", project=config["project"])
    conda:
        "../envs/python.yaml"
    script:
        "../scripts/summarize_counts.py"

